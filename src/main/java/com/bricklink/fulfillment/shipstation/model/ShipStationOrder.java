package com.bricklink.fulfillment.shipstation.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonRootName;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@ToString
public class ShipStationOrder {
    @JsonIgnore
    private final List<OrderItem> shipStationOrderItems = new ArrayList<>();
    private Long orderId;                              // The system generated identifier for the order. This is a read-only field.
    private String orderNumber;                        // A user-defined order number used to identify an order.
    private String orderKey;                           // A user-provided key that should be unique to each order. Can only be initalized during order creation. If the orderkey isn't specified during creation, a unique value will be generated and assigned to the order.
    private Date orderDate;                            // The date the order was placed.
    private LocalDateTime createDate;                  // The timestamp the order was created in ShipStation's database. Read-Only.
    private LocalDateTime modifyDate;                  // The timestamp the order was modified in ShipStation. modifyDate will equal createDate until a modification is made. Read-Only.
    private Date paymentDate;                          // The date the order was paid for.
    private Date shipByDate;                           // The date the order is to be shipped before or on. This field is a suggested value generated by the order source/platform/cart and passed to ShipStation. Not all ShipStation integrations support this field and will show null if absent.
    private String orderStatus;                        // The order's status. Possible values: "awaiting_payment", "awaiting_shipment", "shipped", "on_hold", "cancelled"
    private Long customerId;                           // Unique identifier for the customer. Generated by ShipStation the first time the customer record is created. Read-Only
    private String customerUsername;                   // Identifier for the customer in the originating system. This is typically a username or email address. This value is required in order to generate a customer profile
    private String customerEmail;                      // The customer's email address.
    private Address billTo;                            // The recipients billing address.
    private Address shipTo;                            // The recipients shipping address.
    private OrderItem[] items;                         // Array of purchased items.
    private Double orderTotal;                         // The order total. Please note is this a read-only field.
    private Double amountPaid;                         // The total amount paid for the Order.
    private Double taxAmount;                          // The total tax amount for the Order.
    private Double shippingAmount;                     // Shipping amount paid by the customer, if any.
    private String customerNotes;                      // Notes left by the customer when placing the order.
    private String internalNotes;                      // Private notes that are only visible to the seller.
    private Boolean gift;                              // Specifies whether or not this Order is a gift
    private String giftMessage;                        // Gift message left by the customer when placing the order.
    private String paymentMethod;                      // Method of payment used by the customer.
    private String requestedShippingService;           // Identifies the shipping service selected by the customer when placing this order. This value is given to ShipStation by the marketplace/cart. If value is "null" then the marketplace or cart does not support this field in ShipStation.
    private String carrierCode;                        // The code for the carrier that is to be used(or was used) when this order is shipped(was shipped).
    private String serviceCode;                        // The code for the shipping service that is to be used(or was used) when this order is shipped(was shipped).
    private String packageCode;                        // The code for the package type that is to be used(or was used) when this order is shipped(was shipped).
    private String confirmation;                       // The type of delivery confirmation that is to be used(or was used) when this order is shipped(was shipped).
    private Date shipDate;                             // The date the order was shipped.
    private Date holdUntilDate;                        // If placed on hold, this date is the expiration date for this order's hold status. The order is moved back to awaiting_shipment on this date.
    private Weight weight;                             // Weight of the order.
    private Dimensions dimensions;                     // Dimensions of the order.
    private InsuranceOptions insuranceOptions;         // The shipping insurance information associated with this order.
    private InternationalOptions internationalOptions; // Customs information that can be used to generate customs documents for international orders.
    private AdvancedOptions advancedOptions;           // Various advanced options that may be available depending on the shipping carrier that is used to ship the order.
    private Integer[] tagIds;                          // Array of tagIds. Each tagId identifies a tag that has been associated with this order.
    private String userId;                             // User assigned to Order/Shipment in the GUID. Read-Only.
    private boolean externallyFulfilled;               // States whether the order has is current marked as externally fulfilled by the marketplace. A common example is when an Amazon order is marked an Amazon Fulfilled Network (AFN). If the order is an AFN then this element will be true. Read-Only.
    private String externallyFulfilledBy;              // If externally fulfilled is true then this String will return how the order is being fulfilled by the marketplace. Read-Only.

    public OrderItem[] getItems() {
        return shipStationOrderItems.toArray(new OrderItem[0]);
    }

    public void createInternationalOptions() {
        internationalOptions = new InternationalOptions();
        internationalOptions.setContents("merchandise");
        internationalOptions.setNonDelivery("return_to_sender");
        CustomsItem[] customsItems =
                getShipStationOrderItems().stream()
                                          .map(ssoi -> {
                                              CustomsItem customsItem = new CustomsItem();
                                              customsItem.setCustomsItemId(null);
                                              customsItem.setDescription(String.format("Lego (Toys) - %s", ssoi.getName()));
                                              customsItem.setQuantity(ssoi.getQuantity());
                                              customsItem.setValue(ssoi.getUnitPrice());
                                              customsItem.setHarmonizedTariffCode(null);
                                              customsItem.setCountryOfOrigin("US");
                                              return customsItem;
                                          })
                                          .toArray(CustomsItem[]::new);
        internationalOptions.setCustomsItems(customsItems);
    }

    public void createInsuranceOptions() {
        insuranceOptions = new InsuranceOptions();
        insuranceOptions.setProvider("shipsurance");
        insuranceOptions.setInsureShipment(true);
        insuranceOptions.setInsuredValue(Math.ceil(getOrderTotal() - getShippingAmount()));
    }

    @JsonIgnore
    public boolean isPaid() {
        return OrderStatus.valueOf(this.getOrderStatus().toUpperCase()).compareTo(OrderStatus.AWAITING_SHIPMENT) >= 0;
    }

    @JsonIgnore
    public boolean isNotPaid() {
        return !this.isPaid();
    }

    @JsonIgnore
    public boolean isShipped() {
        return OrderStatus.valueOf(this.getOrderStatus().toUpperCase()).compareTo(OrderStatus.SHIPPED) >= 0;
    }

    @JsonIgnore
    public boolean isNotShipped() {
        return !this.isShipped();
    }

    public void updateStatusToPaid(Date paymentDate, Double amountPaid) {
        if (isNotPaid()) {
            setPaymentDate(Optional.ofNullable(this.getPaymentDate()).orElse(Optional.ofNullable(paymentDate).orElse(new Date())));
            setOrderStatus(OrderStatus.AWAITING_SHIPMENT.label);
            setAmountPaid(amountPaid);
        }
    }

    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    @ToString
    @JsonRootName("orders")
    public static class OrdersList {
        private List<ShipStationOrder> orders;
    }
}
